/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define ADJUST  3

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -------------------------------------------------------------------------------------
// | LT(1) ESC   |  Q  |  W  |  E  |  R  |  T  |                 |  Y  |      U     |  I  |  O  |  P  |  LT(1) -  |
// | LT(2) TAB   |  A  |  S  |  D  |  F  |  G  |                 |  H  |  LT(1) J   |  K  |  L  |  ;  |     '     |
// | LCTRL(LPAR) |  Z  |  X  |  C  |  V  |BSPC |                 |  B  |      N     |  M  |  ,  |  .  |     /     |
//                              | ALT |  LSHFT |    LT (3) SPC   |  LT (1) ENT  | GUI(CAPSLOCK) |
                        bindings = <
   &lt 1 ESC      &kp Q &kp W &kp E &kp R &kp T             &kp Y &kp U    &kp I     &kp O     &kp P     &lt 1 MINUS
   &lt 2 TAB      &kp A &kp S &kp D &kp F &kp G             &kp H &lt 1 J  &kp K     &kp L     &kp SEMI  &kp SQT
   &mt LCTRL LPAR &kp Z &kp X &kp C &kp V &kp BSPC          &kp B &kp N    &kp M     &kp COMMA &kp DOT   &kp FSLH
                        &kp LALT  &kp LSHIFT   &lt 3 SPACE  &lt 1 RET  &mt LGUI CAPS
                        >;
                };

                lower_layer {
// ----------------------------------------------------------------------------------
// | ~  |  !  |  @  |  #  |  $  |  %  |       |  ^  |  &  |  *  |  (  |  )  |    \  |
// |    |  [  |  ]  |  {  |  }  | "|" |       | )   |     |     |     |  UP |    ~  |
// |    | ESC | GUI | ALT | CAPS|  DEL|       |     |     |     | LEFT| DOWN| RIGHT |
//                       |  HOME  |  C(KC_ARROW LEFT) |CHINESE| C(KC_ARROW LEFT) |   END  |
                        bindings = <
   &kp GRAVE &kp EXCL         &kp AT            &kp HASH &kp DLLR &kp PRCNT     &kp CARET &kp AMPS &kp ASTERISK  &kp LPAR  &kp RPAR  &kp BACKSLASH
   &trans    &kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LBRC &kp RBRC &kp PIPE      &kp RPAR  &trans   &trans        &trans    &kp UP    &kp GRAVE
   &trans    &kp ESC          &kp LGUI          &kp LALT &kp CLCK &kp DEL       &trans    &trans   &trans        &kp LEFT  &kp DOWN  &kp RIGHT
                              &kp HOME          &kp RET      &kp LA(LSHIFT)    &kp LC(RIGHT_ARROW)       &kp END
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |CALC|  HOME  |  G(UP)  |  END  |  4  |  5  |   |  7  | 8  |  9  |  /  |  *  | - |
// |    |  G(LEFT)  | G(DOWN) |  G(RIGHT)  |  ]  |  \  |   | 4  | 5  | 6  | F4  | F5  | +  |
// |    | ESC | GUI | ALT | CAPS|  "  |   | 1  | 2  | 3  | F10 | = | ENT |
//                       | ESC | ENTER | = | 0   |  .   |
                        bindings = <
   &kp C_AL_CALCULATOR &kp HOME    &kp LG(UP)    &kp END    &kp N4    &kp N5        &kp N7    &kp N8    &kp N9    &kp KP_DIVIDE    &kp KP_MULTIPLY    &kp KP_MINUS
   &trans &kp LG(LEFT) &kp LG(DOWN) &kp LG(RIGHT)  &kp RBKT  &kp BSLH      &kp N4    &kp N5    &kp N6    &kp F4    &kp F5    &kp KP_PLUS
   &trans &kp ESC   &kp LGUI  &kp RALT  &kp CLCK  &kp SQT       &kp N1   &kp N2    &kp N3    &kp F10   &kp EQUAL   &kp KP_ENTER
                                &kp ESC      &kp RET       &kp EQUAL        &kp N0      &kp KP_DOT
                        >;
                };

                adjust_layer {
// -----------------------------------------------------------------------------------------
// | RGB TOG  | 1     | 2          |    3       |  HOME  | END          |   |  BT1   | BT2 |     BT3   | BT4 | BT5 | BT CLR |
// | RGB ANI+ |       | S(G(KC_S)  | C(KC_LEFT) |  UP    |  C(KC_RIGHT) |   |        |     |           |     |     |        |
// | RGB ANI- |       |            |    LEFT    |  DOWN  |     RIGHT    |   |        |     | PLAYPAUSE |     |     |        |
//                                              |VOL DOWN|    VOL UP    |   | MEDIA PRE    |MEDIA NXT  |
                        bindings = <
   &rgb_ug RGB_TOG        &kp N1      &kp N2        &kp N3       &kp HOME       &kp END    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_CLR
   &rgb_ug RGB_EFF        &none        &kp LG(LS(S))        &kp LC(LEFT_ARROW)       &kp UP       &kp LC(RIGHT_ARROW)                  &none        &none        &none        &none        &none        &none
   &rgb_ug RGB_EFR        &none        &none        &kp LEFT     &kp DOWN     &kp RIGHT             &none       &none        &kp K_PP       &none        &none        &none
           &kp C_VOL_UP      &kp C_VOL_DN       &none        &kp C_PREVIOUS      &kp C_NEXT
                        >;
                };
        };
};
